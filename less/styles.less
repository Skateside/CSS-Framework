@charset "utf-8";

// Basic Style Sheet
// =============================================================================


// Variables
// -----------------------------------------------------------------------------
// 
// These includes help set up the style sheet.

@import "variables";


// Mixins
// -----------------------------------------------------------------------------
// 
// These includes help create the style sheet.

@import "mixins/button-variant";
@import "mixins/text-and-background";
@import "mixins/grid";


// Base files
// -----------------------------------------------------------------------------
// 
// The core files style the basic elements.

/* # Base rules

This style sheet attempts to show how CSS selectors can be limited to no more
than a single class (although there are exceptions). Keeping to such a
restriction helps contain the styling to a module and allows for easier
sub-classes of modules. It also enables the surgical classes (below) to work.
*/

@import "base/universal";
@import "base/basic fonts";
@import "base/block-level elements";
@import "base/headings";
@import "base/tables";
@import "base/sub and sup";
@import "base/images";


// Utilities
// -----------------------------------------------------------------------------
// 
// Repeated design patterns, abstracted into reusable classes.

/* # Utilities

Utility classes are frequently used styling patterns. They are the only classes
in this style sheet that are allowed to know anything about the child elements
(although this should be limited to the immediate children using the direct
decendant selector `>`). 
*/

@import "utilities/clearfix"; // DEPRECATED
@import "utilities/floated"; // DEPRECATED
@import "utilities/lists";
@import "utilities/vertical align";
@import "utilities/reduce";
@import "utilities/margined";


// Layout
// -----------------------------------------------------------------------------
// 
// Layout classes are designed to position elements. They sit before the modules
// so that module classes can override the styles if necessary, but this is not
// essential.

/* # Layout

Structural classes. They are all prefixed with `l-` to separate them from 
modules.

*/

@import "layout/media";
@import "layout/grid";


// Modules
// -----------------------------------------------------------------------------
// 
// Unique (although repeatable) design elements. There are likely to be many of
// these throughout the project's lifespan, but try to limit the numbers.

/* # Modules

Code from here on describes modules. Each module is designed to be stand-alone,
meaning that it has no other module dependancies (although it may rely on base
rules, utility, layout and helper classes).
*/

@import "modules/input";
@import "modules/button";


// Helper classes
// -----------------------------------------------------------------------------
// 
// Designed to override modules.

/* # Helper classes

Helper classes are designed to override modules in a site-consisten way. They
override one or two styles at a time, mainly existing to remove the strain from
the modules as well as being able to fix small rendering errors quickly.
*/

@import "helper/text and background";
